<?php

require_once 'CurrencyExchangeAPI.php';
require_once 'CurrencyConverter.php';
require_once 'config.php';
require_once 'Database.php';


$ipAddress = $_SERVER['REMOTE_ADDR'];


function generateApiKey($length = 32) {
    return hash('sha256', bin2hex(random_bytes($length)));
}

function generateSha256Hash($inputString) {
    return hash('sha256', $inputString);
}


function saveError($ipAddress, $errorMessage, $connection) {
    $stmt = $connection->prepare("INSERT INTO errors (ip_address, error_message) VALUES (?, ?)");
    $stmt->execute([$ipAddress, $errorMessage]);
}


function isValidApiKey($apiKey, $connection) {
    $hashedApiKey = hash('sha256', $apiKey);
    $stmt = $connection->prepare("SELECT * FROM api_keys WHERE api_key = ?");
    $stmt->execute([$hashedApiKey]);
    return $stmt->fetch(PDO::FETCH_ASSOC) !== false;
}



$database = new Database($dbHost, $dbName, $dbUser, $dbPassword);
$connection = $database->connect();


if ($connection) {
    $apiKey = isset($_GET['apiKey']) ? $_GET['apiKey'] : null;

    if (!$apiKey) {
        // Return an error response if the API key is missing
        http_response_code(400); // Bad Request
        echo json_encode(array("error" => "API key missing"));
        exit;
    }

    if (!isValidApiKey($apiKey, $connection)) {
        $ipAddress = $_SERVER['REMOTE_ADDR'];

        if (checkAndBanIP($ipAddress, $connection)) {
            // If the IP address is banned, return an error response
            http_response_code(403); // Forbidden
            echo json_encode(array("error" => "IP address banned"));
            exit;
        }

        // Return an error response if the API key is invalid
        //function saveError($ipAddress, $errorMessage, $connection)
        saveError($ipAddress,"Invalid API key",$connection);
        http_response_code(401); // Unauthorized
        echo json_encode(array("error" => "Invalid API key"));
        exit;
        }
    // Handle requests
    if ($_SERVER['REQUEST_METHOD'] === 'GET') {
        if (isset($_GET['action'])) {
            if ($_GET['action'] === 'supportedCurrencies') {

                $currencyConverter = new CurrencyConverter($exchangeAPI);

                if (isset($currencyConverter)) {
                    // Handle the 'supportedCurrencies' action
                    $supportedCurrencies = $currencyConverter->getSupportedCurrencies();
                    // Output the list of supported currencies as JSON

                    logRequest($apiKey,$_GET['action'],$connection);
                    header('Content-Type: application/json');
                    echo json_encode($supportedCurrencies);
                    
                    exit; // Stop further execution
                } else {
                    // Return an error response if $currencyConverter is not defined
                    http_response_code(500); // Internal Server Error
                   echo json_encode(array("error" => "CurrencyConverter not instantiated"));
                   
                    exit;
                }

            }
            // Handle other actions if needed
        }
        // Return an error response if no action is specified
        http_response_code(400); // Bad Request
        echo json_encode(array("error" => "Action not specified"));
        exit;
    }

    $database->close();
} else {
    echo "Failed to connect to the database.";
}

function logRequest($hash, $method, $connection) {
    $stmt = $connection->prepare("INSERT INTO log (hash_id, method) VALUES (?, ?)");
    $stmt->execute([generateSha256Hash($hash), $method]);
}


function checkAndBanIP($ipAddress, $connection) {
    $stmt = $connection->prepare("SELECT COUNT(*) AS error_count FROM errors WHERE ip_address = ? AND error_message = 'Invalid API key'");
    $stmt->execute([$ipAddress]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);

    $errorCount = $result['error_count'];

    if ($errorCount >= 3) {
        
        $stmt = $connection->prepare("SELECT * FROM banned_ips WHERE ip_address = ?");
        $stmt->execute([$ipAddress]);
        $bannedIp = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$bannedIp) {           
            $banEndTime = date('Y-m-d H:i:s', strtotime('+30 minutes'));
            $stmt = $connection->prepare("INSERT INTO banned_ips (ip_address, ban_end_time) VALUES (?, ?)");
            $stmt->execute([$ipAddress, $banEndTime]);

            

            return true; // IP address banned
        } else {
            // Check if the ban has ended
            $currentTime = date('Y-m-d H:i:s');
            $banEndTime = $bannedIp['ban_end_time'];

            if ($currentTime > $banEndTime) {
                // Remove the IP address from the banned_ips table
                $stmt = $connection->prepare("DELETE FROM banned_ips WHERE ip_address = ?");
                $stmt->execute([$ipAddress]);
                
                return false; // IP address ban ended
            } else {
                return true; // IP address still banned
            }
        }
    }

    return false; // IP address not banned
}





?>